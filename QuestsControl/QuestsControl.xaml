<ad:DockableContent x:Name="questsControlDockableContent" Title="Quests"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:ad="clr-namespace:AvalonDock;assembly=AvalonDock"
	xmlns:local="clr-namespace:Sokoban.View"
	xmlns:sokXml="clr-namespace:Sokoban.Model"
	xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
	mc:Ignorable="d" 
	x:Class="Sokoban.View.QuestsControl"
	HorizontalAlignment="Stretch" 
	VerticalAlignment="Stretch" 
	d:DesignWidth="400.083" d:DesignHeight="197.88">

	<ad:DockableContent.Resources>	
		<ResourceDictionary>

			<local:FontWeightToBoolConverter x:Key="fontWeightToBoolConverter" />
			<!-- http://leecampbell.blogspot.com/2009/01/horizontal-stretch-on-treeviewitems.html - for focus of items -->
			<Style TargetType="TreeViewItem"
				   BasedOn="{StaticResource {x:Type TreeViewItem}}">
			<EventSetter Event="TreeViewItem.Selected" Handler="trv_Selected" />
			<Setter Property="HorizontalContentAlignment" Value="Left" />
		  <Setter Property="Template">
			<Setter.Value>
			  <ControlTemplate TargetType="TreeViewItem">
				<StackPanel>
				  <Grid>
					<Grid.ColumnDefinitions>
					  <ColumnDefinition Width="Auto"
										MinWidth="19" />
					  <ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
					  <RowDefinition Height="Auto" />
					  <RowDefinition />
					</Grid.RowDefinitions>
					<ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
								  ClickMode="Press"
								  Name="Expander">
					  <ToggleButton.Style>
						<Style TargetType="ToggleButton">
						  <Setter Property="UIElement.Focusable"
								  Value="false" />
						  <Setter Property="FrameworkElement.Width"
								  Value="16" />
						  <Setter Property="FrameworkElement.Height"
								  Value="16" />
						  <Setter Property="Control.Template">
							<Setter.Value>
							  <ControlTemplate TargetType="ToggleButton">
								<Border Padding="5,5,5,5"
										Background="#00FFFFFF"
										Width="16"
										Height="16">
								  <Path Fill="#00FFFFFF"
										Stroke="#FF989898"
										Name="ExpandPath">
									<Path.Data>
									  <PathGeometry Figures="M0,0L0,6L6,0z" />
									</Path.Data>
									<Path.RenderTransform>
									  <RotateTransform Angle="135"
													   CenterX="3"
													   CenterY="3" />
									</Path.RenderTransform>
								  </Path>
								</Border>
								<ControlTemplate.Triggers>
								  <Trigger Property="UIElement.IsMouseOver"
										   Value="True">
									<Setter TargetName="ExpandPath"
											Property="Shape.Stroke"
											Value="#FF1BBBFA" />
									<Setter TargetName="ExpandPath"
											Property="Shape.Fill"
											Value="#00FFFFFF" />
								  </Trigger>
								  <Trigger Property="ToggleButton.IsChecked"
										   Value="True">
									<Setter TargetName="ExpandPath"
											Property="UIElement.RenderTransform">
									  <Setter.Value>
										<RotateTransform Angle="180"
														 CenterX="3"
														 CenterY="3" />
									  </Setter.Value>
									</Setter>
									<Setter TargetName="ExpandPath"
											Property="Shape.Fill"
											Value="#FF595959" />
									<Setter TargetName="ExpandPath"
											Property="Shape.Stroke"
											Value="#FF262626" />
								  </Trigger>
								</ControlTemplate.Triggers>
							  </ControlTemplate>
							</Setter.Value>
						  </Setter>
						</Style>
					  </ToggleButton.Style>
					</ToggleButton>
					<Border x:Name="Bd"
							HorizontalAlignment="Stretch"
							BorderThickness="{TemplateBinding Border.BorderThickness}"
							BorderBrush="{TemplateBinding Border.BorderBrush}"
							Padding="{TemplateBinding Control.Padding}"
							Background="{TemplateBinding Panel.Background}"
							SnapsToDevicePixels="True"
							Grid.Column="1">
					  <ContentPresenter x:Name="PART_Header"
										Content="{TemplateBinding HeaderedContentControl.Header}"
										ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
										ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
										ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
										ContentSource="Header"
										HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
					</Border>
					<ItemsPresenter x:Name="ItemsHost"
									Grid.Column="1"
									Grid.Row="1" />
				  </Grid>
				</StackPanel>
				<ControlTemplate.Triggers>
				  <Trigger Property="TreeViewItem.IsExpanded"
						   Value="False">
					<Setter TargetName="ItemsHost"
							Property="UIElement.Visibility"
							Value="Collapsed" />
				  </Trigger>
				  <Trigger Property="ItemsControl.HasItems"
						   Value="False">
					<Setter TargetName="Expander"
							Property="UIElement.Visibility"
							Value="Hidden" />
				  </Trigger>
				  <Trigger Property="TreeViewItem.IsSelected"
						   Value="True">
					<Setter TargetName="Bd"
							Property="Panel.Background"
							Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
					<Setter Property="TextElement.Foreground"
							Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				  </Trigger>
				  <MultiTrigger>
					<MultiTrigger.Conditions>
					  <Condition Property="TreeViewItem.IsSelected"
								 Value="True" />
					  <Condition Property="Selector.IsSelectionActive"
								 Value="False" />
					</MultiTrigger.Conditions>
					<Setter TargetName="Bd"
							Property="Panel.Background"
							Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
					<Setter Property="TextElement.Foreground"
							Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				  </MultiTrigger>
				  <Trigger Property="UIElement.IsEnabled"
						   Value="False">
					<Setter Property="TextElement.Foreground"
							Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
				  </Trigger>
				</ControlTemplate.Triggers>
			  </ControlTemplate>
			</Setter.Value>
		  </Setter>
		</Style>
		<!--
		  <local:Categories x:Key="testData">
			<local:Category Name="Unsorted leagues" ID="1">
				<local:Category.Leagues>
					<local:League ID="5" Name="blabla">
						<local:League.Rounds>
							<local:Round ID="1" Name="Round no. 1"/>
							<local:Round ID="4" Name="Round no. 2"/>
							<local:Round ID="5" Name="Round no. 3"/>
						</local:League.Rounds>
					</local:League>
				</local:Category.Leagues>
			</local:Category>
			<local:Category Name="Official leagues" ID="2"/>
		</local:Categories>
		-->
		</ResourceDictionary>
	</ad:DockableContent.Resources>

		<DockPanel LastChildFill="True">
		<DockPanel DockPanel.Dock="Bottom" LastChildFill="True">
			<TextBlock DockPanel.Dock="Left" Margin="5,0,5,0">Status:</TextBlock>            
			<Button DockPanel.Dock="Right" Margin="0,0,5,0" Click="refresh_click">Refresh</Button>
			<TextBlock x:Name="status" Text="{Binding Status}" FontWeight="Bold" HorizontalAlignment="Stretch"></TextBlock>
		</DockPanel>

		<TreeView Margin="5,0,5,5" ItemsSource="{Binding Path=Categories}"  x:Name="treeView">
		<!--<TreeView Margin="5,0,5,5" ItemsSource="{StaticResource testData}"  x:Name="treeView">-->
			
			
			<TreeView.ItemContainerStyle>
				<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
					<EventSetter Event="TreeViewItem.MouseDoubleClick" Handler="trv_CategoryMouseDoubleClick" />
					<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="trv_PreviewMouseRightButtonDown" />
				</Style>
			</TreeView.ItemContainerStyle>
			
			<TreeView.Resources>                                
				
				<!-- categories -->
				<HierarchicalDataTemplate DataType="{x:Type sokXml:Category}" ItemsSource="{Binding Path=Leagues}">
					<TextBlock Text="{Binding Path=Name}" FontSize="16" FontWeight="{Binding Path=Loaded, Converter={StaticResource fontWeightToBoolConverter}}" />
						
					<!-- leagues -->
					
					<HierarchicalDataTemplate.ItemContainerStyle>						
						<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
							<EventSetter Event="TreeViewItem.MouseDoubleClick" Handler="trv_LeaguesMouseDoubleClick" />
							<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="trv_PreviewMouseRightButtonDown" />
						</Style>
					</HierarchicalDataTemplate.ItemContainerStyle>
					
				</HierarchicalDataTemplate>

				<!-- League's rounds -->
				<HierarchicalDataTemplate DataType="{x:Type sokXml:League}" ItemsSource="{Binding Path=Rounds}">
					<TextBlock Text="{Binding Path=Name}" FontSize="14">
						<TextBlock.ContextMenu>
							<ContextMenu>
							<MenuItem Header="Play league" Name="cmPlayLeague" Click="cmPlayLeague_Click" 
										DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>
							</ContextMenu>
						</TextBlock.ContextMenu>
					</TextBlock>

					<HierarchicalDataTemplate.ItemContainerStyle>
						
						<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
							<Setter Property="Padding" Value="0,0" />
							<EventSetter Event="TreeViewItem.MouseDoubleClick" Handler="trv_RoundMouseDoubleClick" />
							<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="trv_PreviewMouseRightButtonDown" />
							<!--<EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="trv_PreviewMouseRightButtonDown"/>-->
						</Style>
					</HierarchicalDataTemplate.ItemContainerStyle>
				</HierarchicalDataTemplate>

				<HierarchicalDataTemplate DataType="{x:Type sokXml:Round}">
					<TextBlock Margin="0,0,0,0" Text="{Binding}">                        
							 <!--{Binding Path=Name} ({Binding Path=BestTime})-->                                                   
						<TextBlock.ContextMenu>
						   <ContextMenu>
							<MenuItem Header="Play round" Name="cmPlayRound" Click="cmPlayRound_Click" 
									  DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>
							 <MenuItem Header="Play over network" Name="cmPlayOverNetwork" Click="cmPlayOverNetwork_Click" 
									  DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"/>  
						   </ContextMenu>
					  </TextBlock.ContextMenu>
					</TextBlock>
				</HierarchicalDataTemplate>
			</TreeView.Resources>
		</TreeView>        
	</DockPanel>
</ad:DockableContent>    
